#!/usr/bin/env python
import os
import argparse
from datetime import datetime
from datetime import timedelta
import calendar
from sigtools import modifiers

from clize import run

import pandas as pd
import matplotlib.pyplot as plt

DATA_FILENAME = os.path.expanduser("~/.pomodoro")


def load():
    data = pd.read_csv(DATA_FILENAME, parse_dates=["start"])
    data = (data.loc[data["work"] == "work"])
    data["day"] = data["start"]
    data["day"] = data["day"].apply(lambda x: x.date())
    return data


def load_duration_per_day(data):
    duration_per_day = data.groupby("day").sum() / 60.
    duration_per_day.index = pd.to_datetime(duration_per_day.index)
    return duration_per_day


def load_duration_per_day_full(duration_per_day):
    d = pd.date_range(duration_per_day.index[0], duration_per_day.index[-1])
    e = pd.DataFrame(index=d)
    duration_per_day_full = pd.merge(
        e, duration_per_day, how='left', left_index=True, right_index=True)
    duration_per_day_full["duration"] = duration_per_day_full[
        "duration"].fillna(0)
    return duration_per_day_full


@modifiers.kwoargs('weeksbefore')
def main(action='overall', weeksbefore=0):
    """
    action can be :

        overall : all pomodoros together in a plot.
        week : nb of hours per day for a specific week.
               if --weeksbefore=0, it corresponds to this week.
               if --weeksbefore=1, it corresponds to last week.
               if --weeksbefore=2, it corresponds to last last week.
               etc.
        days : mean nb of hours per day, globally.
        thisweek : nb of hours per day this week.
        lastweek : nb of hours per day last week.
        stats : mean and standard deviation per day.
        weeks : nb of hours per week.
        today : nb hours today.
        yesterday : nb hours yesterday.
    """
    data = load()
    if action == "overall":
        duration_per_day = load_duration_per_day(data)
        duration_per_day['duration(hours)'] = duration_per_day['duration']
        duration_per_day.plot(y='duration(hours)', x_compat=True)
        #plt.xticks([], [])
        plt.show()
    elif action == "days":
        D = data.copy()
        weekmap = ["Monday", "Tuesday", "Wednesday",
                   "Thursday", "Friday", "Saturday", "Sunday"]
        D["date"] = D["start"].map(lambda x: x.date())
        D = D.groupby(by="date").sum().reset_index()
        D["day"] = D["date"].map(lambda x: x.weekday())
        D["dayname"] = D["date"].map(lambda x: weekmap[x.weekday()])
        D = D.groupby(by="dayname")
        D = D.mean() / 60.
        D['duration(hours)'] = D['duration']
        D = D.reset_index()
        D['weekday'] = D['dayname'].map(lambda d: weekmap.index(d))
        D = D.sort_values(by='weekday')
        print(D)
        D = D.plot(
            kind="bar",
            title="hours per day",
            figsize=(8, 8),
            x="dayname", y="duration(hours)")
        plt.title("Per day hours")
        plt.show()
    elif action in ("week", "thisweek", "lastweek"):
        if action == "thisweek":
            nbweeks = 0
        elif action == "lastweek":
            nbweeks = 1
        else:
            nbweeks = weeksbefore
        D = data.copy()
        weekmap = ["Monday", "Tuesday", "Wednesday",
                   "Thursday", "Friday", "Saturday", "Sunday"]
        D["day"] = D["start"].map(lambda x: x.weekday())
        D["dayname"] = D["start"].map(lambda x: weekmap[x.weekday()])

        sum_up = False
        # if -1 consider previous_n_weeks, if >= 0 consider current week for 0,
        # then previous week etc
        previous_weeks = nbweeks
        last_monday = (datetime.today().date()) - \
            timedelta(days=datetime.today().weekday())
        last_monday -= previous_weeks * timedelta(days=7)
        next_sunday = last_monday + timedelta(days=6)
        next_monday = last_monday + timedelta(days=7)
        if previous_weeks >= 0:
            D = D[D.start >= last_monday]
        if sum_up is False:
            D = D[D.start < next_monday]
        D = D.groupby(by=("day", "dayname"))
        D = D.sum() / 60.
        A = D
        D['duration(hours)'] = D['duration']
        D = D.reset_index().plot(
            kind="bar",
            title="hours per day",
            figsize=(8, 8),
            x="dayname", y="duration(hours)")
        plt.title("Total in the week : {:.3f} hours".format(
            A['duration(hours)'].sum()))
        plt.show()
    elif action == "stats":
        per_day = (data.groupby(by="day")).sum() / 60.
        print("per day : {}+/-{}".format(per_day.values.mean(), per_day.values.std()))
    elif action == "weeks":
        week = lambda x: x.isocalendar()[1]
        year = lambda x: x.isocalendar()[0]
        data['week'] = data['day'].apply(week)
        data['year'] = data['day'].apply(year)
        data = data.groupby(('week', 'year')).sum() / 60
        data = data.reset_index()
        data = data.sort_values(by=['year', 'week'], ascending=[True, True])
        data['weekyear'] = data['week'] + \
            (data['year'] - data['year'].min()) * 52
        data['duration(hours)'] = data['duration']
        print(data)
        data.plot(title="hours per week", x='weekyear', y='duration(hours)')
        plt.axhline(y=data['duration'].max(), c='green', ls='dashed')
        plt.show()
    elif action == "today" or action == "yesterday":
        if action == "yesterday":
            d = 1
        else:
            d = 0
        today = datetime.today().date() - timedelta(d)
        D = data[data["start"] >= today]
        print("{:.3f} h".format(D["duration"].sum() / 60.))

if __name__ == "__main__":
    run(main)
